# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

env:
  S3_BUCKET_NAME: image.catvillage.shop
  RESOURCE_PATH: ./server/catvillage/src/main/resources-prod/application.yml

on:
  push:
    paths-ignore: [ "client/**" ]
    branches: [ "dev" ]
#  pull_request:
 #   paths-ignore: [ "client/**" ]
  #  branches: [ "dev" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Set yaml file
      uses: microsoft/variable-substitution@v1
      with:
        files: ${{ env.RESOURCE_PATH }}
      env:
        jwt.secret: ${{ secrets.JWT_SECRET }}
    
    # grant execute permission for gradlew
    - name : Grant execute permission for gradlew
      run: chmod +x server/catvillage/gradlew
      shell: bash

    # build gradlew
    - name: Build with Gradle
      run: cd server/catvillage; ./gradlew build -Pprofile=prod
      shell: bash

    # build한 후 프로젝트를 압축합니다.
    - name: Make zip file
      run: zip -r ./springBoot-deploy.zip .
      shell: bash

    - name: Configure AWS Credentials Action For GitHub Actions
      # You may pin to the exact commit or the version.
      # uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
      uses: aws-actions/configure-aws-credentials@v1
      with:
        # AWS Access Key ID. This input is required if running in the GitHub hosted environment. It is optional if running in a self-hosted environment that already has AWS credentials, for example on an EC2 instance.
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        # AWS Secret Access Key. This input is required if running in the GitHub hosted environment. It is optional if running in a self-hosted environment that already has AWS credentials, for example on an EC2 instance.
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # AWS Session Token
        aws-region: ap-northeast-2
        # Whether to set the AWS account ID for these credentials as a secret value, so that it is masked in logs. Valid values are 'true' and 'false'. Defaults to true

    # 압축한 프로젝트를 S3로 전송합니다.
    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./springBoot-deploy.zip s3://$S3_BUCKET_NAME/springBoot-deploy.zip

    # CodeDeploy에게 배포 명령을 내립니다.
    - name: Code Deploy
      run: >
        aws deploy create-deployment --application-name catvillage-server-deploy
        --deployment-config-name CodeDeployDefault.AllAtOnce
        --deployment-group-name catvillage-server-deploy-group
        --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=springBoot-deploy.zip
